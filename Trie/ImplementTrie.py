"""442. Implement Trie (Prefix Tree)Implement a trie with insert, search, and startsWith methods.# Example# insert("lintcode")# search("code")# >>> false# startsWith("lint")# >>> true# startsWith("linterror")# >>> false# insert("linterror")# search("lintcode)# >>> true# startsWith("linterror")# >>> true"""class TrieNode:    def __init__(self):        self.children = {}        self.hasWord = Falseclass Trie:    def __init__(self):        self.root = TrieNode()    """    @param: word: a word    @return: nothing    """    def insert(self, word):        curr = self.root        for i in range(len(word)): # if word[i] is not curr's children, we need to add this to curr's children            if word[i] not in curr.children:                curr.children[word[i]] = TrieNode()            curr = curr.children[word[i]] # other wise, we update curr node to this word[i] so we can go down        curr.hasWord = True # in the end, we say this word has word    """    @param: word: A string    @return: if the word is in the trie.    """    def search(self, word):        curr = self.root # search a word is in the trie, we start from root        for i in range(len(word)):            if word[i] not in curr.children: # if word[i] is not in curr's children, stop and return false immediately                return False            curr = curr.children[word[i]] # else keep update curr and move on        return curr.hasWord # after searching, we return curr.hasWord    """    @param: prefix: A string    @return: if there is any word in the trie that starts with the given prefix.    """    def startsWith(self, prefix):        curr = self.root # start with root        for i in range(len(prefix)):            if prefix[i] not in curr.children:                return False            curr = curr.children[prefix[i]] #        return Truetrie = Trie()trie.insert("lint")trie.insert("leet")trie.insert("code")print(trie.search("lin"))print(trie.startsWith("li"))